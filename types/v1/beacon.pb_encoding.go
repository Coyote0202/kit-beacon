// Code generated by fastssz. DO NOT EDIT.
// Hash: 6e923b963e51213fe379abef732640ac1beca1ed65f9b559ef357373c8cf5e9c
package v1

import (
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the BeaconBlockData object
func (b *BeaconBlockData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockData object to a target array
func (b *BeaconBlockData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BingBong'
	if size := len(b.BingBong); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BingBong", size, 32)
		return
	}
	dst = append(dst, b.BingBong...)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockData object
func (b *BeaconBlockData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'BingBong'
	if cap(b.BingBong) == 0 {
		b.BingBong = make([]byte, 0, len(buf[0:32]))
	}
	b.BingBong = append(b.BingBong, buf[0:32]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockData object
func (b *BeaconBlockData) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the BeaconBlockData object
func (b *BeaconBlockData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockData object with a hasher
func (b *BeaconBlockData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'BingBong'
	if size := len(b.BingBong); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BingBong", size, 32)
		return
	}
	hh.PutBytes(b.BingBong)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

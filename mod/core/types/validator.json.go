// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/berachain/beacon-kit/mod/primitives"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*validatorJSONMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v Validator) MarshalJSON() ([]byte, error) {
	type Validator struct {
		Pubkey                     primitives.Bytes48 `json:"pubkey"                     ssz-size:"48"`
		WithdrawalCredentials      hexutil.Bytes      `json:"withdrawalCredentials"      ssz-size:"32"`
		EffectiveBalance           primitives.Gwei    `json:"effectiveBalance"`
		Slashed                    bool               `json:"slashed"`
		ActivationEligibilityEpoch primitives.Epoch   `json:"activationEligibilityEpoch"`
		ActivationEpoch            primitives.Epoch   `json:"activationEpoch"`
		ExitEpoch                  primitives.Epoch   `json:"exitEpoch"`
		WithdrawableEpoch          primitives.Epoch   `json:"withdrawableEpoch"`
	}
	var enc Validator
	enc.Pubkey = v.Pubkey
	enc.WithdrawalCredentials = v.WithdrawalCredentials[:]
	enc.EffectiveBalance = v.EffectiveBalance
	enc.Slashed = v.Slashed
	enc.ActivationEligibilityEpoch = v.ActivationEligibilityEpoch
	enc.ActivationEpoch = v.ActivationEpoch
	enc.ExitEpoch = v.ExitEpoch
	enc.WithdrawableEpoch = v.WithdrawableEpoch
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *Validator) UnmarshalJSON(input []byte) error {
	type Validator struct {
		Pubkey                     *primitives.Bytes48 `json:"pubkey"                     ssz-size:"48"`
		WithdrawalCredentials      *hexutil.Bytes      `json:"withdrawalCredentials"      ssz-size:"32"`
		EffectiveBalance           *primitives.Gwei    `json:"effectiveBalance"`
		Slashed                    *bool               `json:"slashed"`
		ActivationEligibilityEpoch *primitives.Epoch   `json:"activationEligibilityEpoch"`
		ActivationEpoch            *primitives.Epoch   `json:"activationEpoch"`
		ExitEpoch                  *primitives.Epoch   `json:"exitEpoch"`
		WithdrawableEpoch          *primitives.Epoch   `json:"withdrawableEpoch"`
	}
	var dec Validator
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Pubkey != nil {
		v.Pubkey = *dec.Pubkey
	}
	if dec.WithdrawalCredentials != nil {
		if len(*dec.WithdrawalCredentials) != len(v.WithdrawalCredentials) {
			return errors.New("field 'withdrawalCredentials' has wrong length, need 32 items")
		}
		copy(v.WithdrawalCredentials[:], *dec.WithdrawalCredentials)
	}
	if dec.EffectiveBalance != nil {
		v.EffectiveBalance = *dec.EffectiveBalance
	}
	if dec.Slashed != nil {
		v.Slashed = *dec.Slashed
	}
	if dec.ActivationEligibilityEpoch != nil {
		v.ActivationEligibilityEpoch = *dec.ActivationEligibilityEpoch
	}
	if dec.ActivationEpoch != nil {
		v.ActivationEpoch = *dec.ActivationEpoch
	}
	if dec.ExitEpoch != nil {
		v.ExitEpoch = *dec.ExitEpoch
	}
	if dec.WithdrawableEpoch != nil {
		v.WithdrawableEpoch = *dec.WithdrawableEpoch
	}
	return nil
}

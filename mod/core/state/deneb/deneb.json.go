// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package deneb

import (
	"encoding/json"
	"errors"

	"github.com/berachain/beacon-kit/mod/core/types"
	"github.com/berachain/beacon-kit/mod/primitives"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*BeaconStateJSONMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BeaconState) MarshalJSON() ([]byte, error) {
	type BeaconState struct {
		GenesisValidatorsRoot        hexutil.Bytes                 `json:"genesisValidatorsRoot" ssz-size:"32"`
		Slot                         primitives.Slot               `json:"slot"`
		Fork                         *primitives.Fork              `json:"fork"`
		LatestBlockHeader            *primitives.BeaconBlockHeader `json:"latestBlockHeader"`
		BlockRoots                   []primitives.Bytes32          `json:"blockRoots"        ssz-size:"?,32" ssz-max:"8192"`
		StateRoots                   []primitives.Bytes32          `json:"stateRoots"        ssz-size:"?,32" ssz-max:"8192"`
		Eth1BlockHash                common.Hash                   `json:"eth1BlockHash" ssz-size:"32"`
		Eth1Data                     *primitives.Eth1Data          `json:"eth1Data"`
		Eth1DepositIndex             uint64                        `json:"eth1DepositIndex"`
		Validators                   []*types.Validator            `json:"validators" ssz-max:"1099511627776"`
		Balances                     []uint64                      `json:"balances"   ssz-max:"1099511627776"`
		RandaoMixes                  []primitives.Bytes32          `json:"randaoMixes" ssz-size:"?,32" ssz-max:"65536"`
		NextWithdrawalIndex          uint64                        `json:"nextWithdrawalIndex"`
		NextWithdrawalValidatorIndex primitives.ValidatorIndex     `json:"nextWithdrawalValidatorIndex"`
		Slashings                    []uint64                      `json:"slashings"     ssz-max:"1099511627776"`
		TotalSlashing                primitives.Gwei               `json:"totalSlashing"`
	}
	var enc BeaconState
	enc.GenesisValidatorsRoot = b.GenesisValidatorsRoot[:]
	enc.Slot = b.Slot
	enc.Fork = b.Fork
	enc.LatestBlockHeader = b.LatestBlockHeader
	if b.BlockRoots != nil {
		enc.BlockRoots = make([]primitives.Bytes32, len(b.BlockRoots))
		for k, v := range b.BlockRoots {
			enc.BlockRoots[k] = v
		}
	}
	if b.StateRoots != nil {
		enc.StateRoots = make([]primitives.Bytes32, len(b.StateRoots))
		for k, v := range b.StateRoots {
			enc.StateRoots[k] = v
		}
	}
	enc.Eth1BlockHash = b.Eth1BlockHash
	enc.Eth1Data = b.Eth1Data
	enc.Eth1DepositIndex = b.Eth1DepositIndex
	enc.Validators = b.Validators
	enc.Balances = b.Balances
	if b.RandaoMixes != nil {
		enc.RandaoMixes = make([]primitives.Bytes32, len(b.RandaoMixes))
		for k, v := range b.RandaoMixes {
			enc.RandaoMixes[k] = v
		}
	}
	enc.NextWithdrawalIndex = b.NextWithdrawalIndex
	enc.NextWithdrawalValidatorIndex = b.NextWithdrawalValidatorIndex
	enc.Slashings = b.Slashings
	enc.TotalSlashing = b.TotalSlashing
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BeaconState) UnmarshalJSON(input []byte) error {
	type BeaconState struct {
		GenesisValidatorsRoot        *hexutil.Bytes                `json:"genesisValidatorsRoot" ssz-size:"32"`
		Slot                         *primitives.Slot              `json:"slot"`
		Fork                         *primitives.Fork              `json:"fork"`
		LatestBlockHeader            *primitives.BeaconBlockHeader `json:"latestBlockHeader"`
		BlockRoots                   []primitives.Bytes32          `json:"blockRoots"        ssz-size:"?,32" ssz-max:"8192"`
		StateRoots                   []primitives.Bytes32          `json:"stateRoots"        ssz-size:"?,32" ssz-max:"8192"`
		Eth1BlockHash                *common.Hash                  `json:"eth1BlockHash" ssz-size:"32"`
		Eth1Data                     *primitives.Eth1Data          `json:"eth1Data"`
		Eth1DepositIndex             *uint64                       `json:"eth1DepositIndex"`
		Validators                   []*types.Validator            `json:"validators" ssz-max:"1099511627776"`
		Balances                     []uint64                      `json:"balances"   ssz-max:"1099511627776"`
		RandaoMixes                  []primitives.Bytes32          `json:"randaoMixes" ssz-size:"?,32" ssz-max:"65536"`
		NextWithdrawalIndex          *uint64                       `json:"nextWithdrawalIndex"`
		NextWithdrawalValidatorIndex *primitives.ValidatorIndex    `json:"nextWithdrawalValidatorIndex"`
		Slashings                    []uint64                      `json:"slashings"     ssz-max:"1099511627776"`
		TotalSlashing                *primitives.Gwei              `json:"totalSlashing"`
	}
	var dec BeaconState
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.GenesisValidatorsRoot != nil {
		if len(*dec.GenesisValidatorsRoot) != len(b.GenesisValidatorsRoot) {
			return errors.New("field 'genesisValidatorsRoot' has wrong length, need 32 items")
		}
		copy(b.GenesisValidatorsRoot[:], *dec.GenesisValidatorsRoot)
	}
	if dec.Slot != nil {
		b.Slot = *dec.Slot
	}
	if dec.Fork != nil {
		b.Fork = dec.Fork
	}
	if dec.LatestBlockHeader != nil {
		b.LatestBlockHeader = dec.LatestBlockHeader
	}
	if dec.BlockRoots != nil {
		b.BlockRoots = make([][32]byte, len(dec.BlockRoots))
		for k, v := range dec.BlockRoots {
			b.BlockRoots[k] = v
		}
	}
	if dec.StateRoots != nil {
		b.StateRoots = make([][32]byte, len(dec.StateRoots))
		for k, v := range dec.StateRoots {
			b.StateRoots[k] = v
		}
	}
	if dec.Eth1BlockHash != nil {
		b.Eth1BlockHash = *dec.Eth1BlockHash
	}
	if dec.Eth1Data != nil {
		b.Eth1Data = dec.Eth1Data
	}
	if dec.Eth1DepositIndex != nil {
		b.Eth1DepositIndex = *dec.Eth1DepositIndex
	}
	if dec.Validators != nil {
		b.Validators = dec.Validators
	}
	if dec.Balances != nil {
		b.Balances = dec.Balances
	}
	if dec.RandaoMixes != nil {
		b.RandaoMixes = make([][32]byte, len(dec.RandaoMixes))
		for k, v := range dec.RandaoMixes {
			b.RandaoMixes[k] = v
		}
	}
	if dec.NextWithdrawalIndex != nil {
		b.NextWithdrawalIndex = *dec.NextWithdrawalIndex
	}
	if dec.NextWithdrawalValidatorIndex != nil {
		b.NextWithdrawalValidatorIndex = *dec.NextWithdrawalValidatorIndex
	}
	if dec.Slashings != nil {
		b.Slashings = dec.Slashings
	}
	if dec.TotalSlashing != nil {
		b.TotalSlashing = *dec.TotalSlashing
	}
	return nil
}

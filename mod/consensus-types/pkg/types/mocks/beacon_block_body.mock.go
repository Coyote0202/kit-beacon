// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	common "github.com/ethereum/go-ethereum/common"

	eip4844 "github.com/berachain/beacon-kit/mod/primitives/pkg/eip4844"

	mock "github.com/stretchr/testify/mock"

	ssz "github.com/ferranbt/fastssz"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// BeaconBlockBody is an autogenerated mock type for the BeaconBlockBody type
type BeaconBlockBody struct {
	mock.Mock
}

type BeaconBlockBody_Expecter struct {
	mock *mock.Mock
}

func (_m *BeaconBlockBody) EXPECT() *BeaconBlockBody_Expecter {
	return &BeaconBlockBody_Expecter{mock: &_m.Mock}
}

// GetBlobKzgCommitments provides a mock function with given fields:
func (_m *BeaconBlockBody) GetBlobKzgCommitments() eip4844.KZGCommitments[common.Hash] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlobKzgCommitments")
	}

	var r0 eip4844.KZGCommitments[common.Hash]
	if rf, ok := ret.Get(0).(func() eip4844.KZGCommitments[common.Hash]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eip4844.KZGCommitments[common.Hash])
		}
	}

	return r0
}

// BeaconBlockBody_GetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobKzgCommitments'
type BeaconBlockBody_GetBlobKzgCommitments_Call struct {
	*mock.Call
}

// GetBlobKzgCommitments is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetBlobKzgCommitments() *BeaconBlockBody_GetBlobKzgCommitments_Call {
	return &BeaconBlockBody_GetBlobKzgCommitments_Call{Call: _e.mock.On("GetBlobKzgCommitments")}
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call) Run(run func()) *BeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call) Return(_a0 eip4844.KZGCommitments[common.Hash]) *BeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetBlobKzgCommitments_Call) RunAndReturn(run func() eip4844.KZGCommitments[common.Hash]) *BeaconBlockBody_GetBlobKzgCommitments_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeposits provides a mock function with given fields:
func (_m *BeaconBlockBody) GetDeposits() []*types.Deposit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeposits")
	}

	var r0 []*types.Deposit
	if rf, ok := ret.Get(0).(func() []*types.Deposit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Deposit)
		}
	}

	return r0
}

// BeaconBlockBody_GetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeposits'
type BeaconBlockBody_GetDeposits_Call struct {
	*mock.Call
}

// GetDeposits is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetDeposits() *BeaconBlockBody_GetDeposits_Call {
	return &BeaconBlockBody_GetDeposits_Call{Call: _e.mock.On("GetDeposits")}
}

func (_c *BeaconBlockBody_GetDeposits_Call) Run(run func()) *BeaconBlockBody_GetDeposits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call) Return(_a0 []*types.Deposit) *BeaconBlockBody_GetDeposits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetDeposits_Call) RunAndReturn(run func() []*types.Deposit) *BeaconBlockBody_GetDeposits_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *BeaconBlockBody) GetEth1Data() *types.Eth1Data {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 *types.Eth1Data
	if rf, ok := ret.Get(0).(func() *types.Eth1Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Eth1Data)
		}
	}

	return r0
}

// BeaconBlockBody_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type BeaconBlockBody_GetEth1Data_Call struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetEth1Data() *BeaconBlockBody_GetEth1Data_Call {
	return &BeaconBlockBody_GetEth1Data_Call{Call: _e.mock.On("GetEth1Data")}
}

func (_c *BeaconBlockBody_GetEth1Data_Call) Run(run func()) *BeaconBlockBody_GetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetEth1Data_Call) Return(_a0 *types.Eth1Data) *BeaconBlockBody_GetEth1Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetEth1Data_Call) RunAndReturn(run func() *types.Eth1Data) *BeaconBlockBody_GetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionPayload provides a mock function with given fields:
func (_m *BeaconBlockBody) GetExecutionPayload() *types.ExecutionPayload {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionPayload")
	}

	var r0 *types.ExecutionPayload
	if rf, ok := ret.Get(0).(func() *types.ExecutionPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExecutionPayload)
		}
	}

	return r0
}

// BeaconBlockBody_GetExecutionPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionPayload'
type BeaconBlockBody_GetExecutionPayload_Call struct {
	*mock.Call
}

// GetExecutionPayload is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetExecutionPayload() *BeaconBlockBody_GetExecutionPayload_Call {
	return &BeaconBlockBody_GetExecutionPayload_Call{Call: _e.mock.On("GetExecutionPayload")}
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call) Run(run func()) *BeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call) Return(_a0 *types.ExecutionPayload) *BeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetExecutionPayload_Call) RunAndReturn(run func() *types.ExecutionPayload) *BeaconBlockBody_GetExecutionPayload_Call {
	_c.Call.Return(run)
	return _c
}

// GetGraffiti provides a mock function with given fields:
func (_m *BeaconBlockBody) GetGraffiti() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGraffiti")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// BeaconBlockBody_GetGraffiti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraffiti'
type BeaconBlockBody_GetGraffiti_Call struct {
	*mock.Call
}

// GetGraffiti is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetGraffiti() *BeaconBlockBody_GetGraffiti_Call {
	return &BeaconBlockBody_GetGraffiti_Call{Call: _e.mock.On("GetGraffiti")}
}

func (_c *BeaconBlockBody_GetGraffiti_Call) Run(run func()) *BeaconBlockBody_GetGraffiti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetGraffiti_Call) Return(_a0 bytes.B32) *BeaconBlockBody_GetGraffiti_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetGraffiti_Call) RunAndReturn(run func() bytes.B32) *BeaconBlockBody_GetGraffiti_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandaoReveal provides a mock function with given fields:
func (_m *BeaconBlockBody) GetRandaoReveal() bytes.B96 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoReveal")
	}

	var r0 bytes.B96
	if rf, ok := ret.Get(0).(func() bytes.B96); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B96)
		}
	}

	return r0
}

// BeaconBlockBody_GetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoReveal'
type BeaconBlockBody_GetRandaoReveal_Call struct {
	*mock.Call
}

// GetRandaoReveal is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetRandaoReveal() *BeaconBlockBody_GetRandaoReveal_Call {
	return &BeaconBlockBody_GetRandaoReveal_Call{Call: _e.mock.On("GetRandaoReveal")}
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call) Run(run func()) *BeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call) Return(_a0 bytes.B96) *BeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_GetRandaoReveal_Call) RunAndReturn(run func() bytes.B96) *BeaconBlockBody_GetRandaoReveal_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopLevelRoots provides a mock function with given fields:
func (_m *BeaconBlockBody) GetTopLevelRoots() ([][32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopLevelRoots")
	}

	var r0 [][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_GetTopLevelRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopLevelRoots'
type BeaconBlockBody_GetTopLevelRoots_Call struct {
	*mock.Call
}

// GetTopLevelRoots is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetTopLevelRoots() *BeaconBlockBody_GetTopLevelRoots_Call {
	return &BeaconBlockBody_GetTopLevelRoots_Call{Call: _e.mock.On("GetTopLevelRoots")}
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call) Run(run func()) *BeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call) Return(_a0 [][32]byte, _a1 error) *BeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_GetTopLevelRoots_Call) RunAndReturn(run func() ([][32]byte, error)) *BeaconBlockBody_GetTopLevelRoots_Call {
	_c.Call.Return(run)
	return _c
}

// GetTree provides a mock function with given fields:
func (_m *BeaconBlockBody) GetTree() (*ssz.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTree")
	}

	var r0 *ssz.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ssz.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ssz.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssz.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_GetTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTree'
type BeaconBlockBody_GetTree_Call struct {
	*mock.Call
}

// GetTree is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) GetTree() *BeaconBlockBody_GetTree_Call {
	return &BeaconBlockBody_GetTree_Call{Call: _e.mock.On("GetTree")}
}

func (_c *BeaconBlockBody_GetTree_Call) Run(run func()) *BeaconBlockBody_GetTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_GetTree_Call) Return(_a0 *ssz.Node, _a1 error) *BeaconBlockBody_GetTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_GetTree_Call) RunAndReturn(run func() (*ssz.Node, error)) *BeaconBlockBody_GetTree_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *BeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type BeaconBlockBody_HashTreeRoot_Call struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) HashTreeRoot() *BeaconBlockBody_HashTreeRoot_Call {
	return &BeaconBlockBody_HashTreeRoot_Call{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *BeaconBlockBody_HashTreeRoot_Call) Run(run func()) *BeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call) Return(_a0 [32]byte, _a1 error) *BeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_HashTreeRoot_Call) RunAndReturn(run func() ([32]byte, error)) *BeaconBlockBody_HashTreeRoot_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRootWith provides a mock function with given fields: hh
func (_m *BeaconBlockBody) HashTreeRootWith(hh ssz.HashWalker) error {
	ret := _m.Called(hh)

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRootWith")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssz.HashWalker) error); ok {
		r0 = rf(hh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockBody_HashTreeRootWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRootWith'
type BeaconBlockBody_HashTreeRootWith_Call struct {
	*mock.Call
}

// HashTreeRootWith is a helper method to define mock.On call
//   - hh ssz.HashWalker
func (_e *BeaconBlockBody_Expecter) HashTreeRootWith(hh interface{}) *BeaconBlockBody_HashTreeRootWith_Call {
	return &BeaconBlockBody_HashTreeRootWith_Call{Call: _e.mock.On("HashTreeRootWith", hh)}
}

func (_c *BeaconBlockBody_HashTreeRootWith_Call) Run(run func(hh ssz.HashWalker)) *BeaconBlockBody_HashTreeRootWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ssz.HashWalker))
	})
	return _c
}

func (_c *BeaconBlockBody_HashTreeRootWith_Call) Return(_a0 error) *BeaconBlockBody_HashTreeRootWith_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_HashTreeRootWith_Call) RunAndReturn(run func(ssz.HashWalker) error) *BeaconBlockBody_HashTreeRootWith_Call {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *BeaconBlockBody) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BeaconBlockBody_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type BeaconBlockBody_IsNil_Call struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) IsNil() *BeaconBlockBody_IsNil_Call {
	return &BeaconBlockBody_IsNil_Call{Call: _e.mock.On("IsNil")}
}

func (_c *BeaconBlockBody_IsNil_Call) Run(run func()) *BeaconBlockBody_IsNil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_IsNil_Call) Return(_a0 bool) *BeaconBlockBody_IsNil_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_IsNil_Call) RunAndReturn(run func() bool) *BeaconBlockBody_IsNil_Call {
	_c.Call.Return(run)
	return _c
}

// Length provides a mock function with given fields:
func (_m *BeaconBlockBody) Length() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Length")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// BeaconBlockBody_Length_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Length'
type BeaconBlockBody_Length_Call struct {
	*mock.Call
}

// Length is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) Length() *BeaconBlockBody_Length_Call {
	return &BeaconBlockBody_Length_Call{Call: _e.mock.On("Length")}
}

func (_c *BeaconBlockBody_Length_Call) Run(run func()) *BeaconBlockBody_Length_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_Length_Call) Return(_a0 uint64) *BeaconBlockBody_Length_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_Length_Call) RunAndReturn(run func() uint64) *BeaconBlockBody_Length_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *BeaconBlockBody) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type BeaconBlockBody_MarshalSSZ_Call struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) MarshalSSZ() *BeaconBlockBody_MarshalSSZ_Call {
	return &BeaconBlockBody_MarshalSSZ_Call{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *BeaconBlockBody_MarshalSSZ_Call) Run(run func()) *BeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZ_Call) Return(_a0 []byte, _a1 error) *BeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZ_Call) RunAndReturn(run func() ([]byte, error)) *BeaconBlockBody_MarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: dst
func (_m *BeaconBlockBody) MarshalSSZTo(dst []byte) ([]byte, error) {
	ret := _m.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(dst)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(dst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconBlockBody_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type BeaconBlockBody_MarshalSSZTo_Call struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - dst []byte
func (_e *BeaconBlockBody_Expecter) MarshalSSZTo(dst interface{}) *BeaconBlockBody_MarshalSSZTo_Call {
	return &BeaconBlockBody_MarshalSSZTo_Call{Call: _e.mock.On("MarshalSSZTo", dst)}
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call) Run(run func(dst []byte)) *BeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call) Return(_a0 []byte, _a1 error) *BeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BeaconBlockBody_MarshalSSZTo_Call) RunAndReturn(run func([]byte) ([]byte, error)) *BeaconBlockBody_MarshalSSZTo_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlobKzgCommitments provides a mock function with given fields: _a0
func (_m *BeaconBlockBody) SetBlobKzgCommitments(_a0 eip4844.KZGCommitments[common.Hash]) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetBlobKzgCommitments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlobKzgCommitments'
type BeaconBlockBody_SetBlobKzgCommitments_Call struct {
	*mock.Call
}

// SetBlobKzgCommitments is a helper method to define mock.On call
//   - _a0 eip4844.KZGCommitments[common.Hash]
func (_e *BeaconBlockBody_Expecter) SetBlobKzgCommitments(_a0 interface{}) *BeaconBlockBody_SetBlobKzgCommitments_Call {
	return &BeaconBlockBody_SetBlobKzgCommitments_Call{Call: _e.mock.On("SetBlobKzgCommitments", _a0)}
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call) Run(run func(_a0 eip4844.KZGCommitments[common.Hash])) *BeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(eip4844.KZGCommitments[common.Hash]))
	})
	return _c
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call) Return() *BeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetBlobKzgCommitments_Call) RunAndReturn(run func(eip4844.KZGCommitments[common.Hash])) *BeaconBlockBody_SetBlobKzgCommitments_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeposits provides a mock function with given fields: _a0
func (_m *BeaconBlockBody) SetDeposits(_a0 []*types.Deposit) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetDeposits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeposits'
type BeaconBlockBody_SetDeposits_Call struct {
	*mock.Call
}

// SetDeposits is a helper method to define mock.On call
//   - _a0 []*types.Deposit
func (_e *BeaconBlockBody_Expecter) SetDeposits(_a0 interface{}) *BeaconBlockBody_SetDeposits_Call {
	return &BeaconBlockBody_SetDeposits_Call{Call: _e.mock.On("SetDeposits", _a0)}
}

func (_c *BeaconBlockBody_SetDeposits_Call) Run(run func(_a0 []*types.Deposit)) *BeaconBlockBody_SetDeposits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*types.Deposit))
	})
	return _c
}

func (_c *BeaconBlockBody_SetDeposits_Call) Return() *BeaconBlockBody_SetDeposits_Call {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetDeposits_Call) RunAndReturn(run func([]*types.Deposit)) *BeaconBlockBody_SetDeposits_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: _a0
func (_m *BeaconBlockBody) SetEth1Data(_a0 *types.Eth1Data) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type BeaconBlockBody_SetEth1Data_Call struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - _a0 *types.Eth1Data
func (_e *BeaconBlockBody_Expecter) SetEth1Data(_a0 interface{}) *BeaconBlockBody_SetEth1Data_Call {
	return &BeaconBlockBody_SetEth1Data_Call{Call: _e.mock.On("SetEth1Data", _a0)}
}

func (_c *BeaconBlockBody_SetEth1Data_Call) Run(run func(_a0 *types.Eth1Data)) *BeaconBlockBody_SetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Eth1Data))
	})
	return _c
}

func (_c *BeaconBlockBody_SetEth1Data_Call) Return() *BeaconBlockBody_SetEth1Data_Call {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetEth1Data_Call) RunAndReturn(run func(*types.Eth1Data)) *BeaconBlockBody_SetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// SetExecutionData provides a mock function with given fields: _a0
func (_m *BeaconBlockBody) SetExecutionData(_a0 *types.ExecutionPayload) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetExecutionData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ExecutionPayload) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockBody_SetExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExecutionData'
type BeaconBlockBody_SetExecutionData_Call struct {
	*mock.Call
}

// SetExecutionData is a helper method to define mock.On call
//   - _a0 *types.ExecutionPayload
func (_e *BeaconBlockBody_Expecter) SetExecutionData(_a0 interface{}) *BeaconBlockBody_SetExecutionData_Call {
	return &BeaconBlockBody_SetExecutionData_Call{Call: _e.mock.On("SetExecutionData", _a0)}
}

func (_c *BeaconBlockBody_SetExecutionData_Call) Run(run func(_a0 *types.ExecutionPayload)) *BeaconBlockBody_SetExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ExecutionPayload))
	})
	return _c
}

func (_c *BeaconBlockBody_SetExecutionData_Call) Return(_a0 error) *BeaconBlockBody_SetExecutionData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_SetExecutionData_Call) RunAndReturn(run func(*types.ExecutionPayload) error) *BeaconBlockBody_SetExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// SetRandaoReveal provides a mock function with given fields: _a0
func (_m *BeaconBlockBody) SetRandaoReveal(_a0 bytes.B96) {
	_m.Called(_a0)
}

// BeaconBlockBody_SetRandaoReveal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRandaoReveal'
type BeaconBlockBody_SetRandaoReveal_Call struct {
	*mock.Call
}

// SetRandaoReveal is a helper method to define mock.On call
//   - _a0 bytes.B96
func (_e *BeaconBlockBody_Expecter) SetRandaoReveal(_a0 interface{}) *BeaconBlockBody_SetRandaoReveal_Call {
	return &BeaconBlockBody_SetRandaoReveal_Call{Call: _e.mock.On("SetRandaoReveal", _a0)}
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call) Run(run func(_a0 bytes.B96)) *BeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B96))
	})
	return _c
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call) Return() *BeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Return()
	return _c
}

func (_c *BeaconBlockBody_SetRandaoReveal_Call) RunAndReturn(run func(bytes.B96)) *BeaconBlockBody_SetRandaoReveal_Call {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *BeaconBlockBody) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BeaconBlockBody_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type BeaconBlockBody_SizeSSZ_Call struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *BeaconBlockBody_Expecter) SizeSSZ() *BeaconBlockBody_SizeSSZ_Call {
	return &BeaconBlockBody_SizeSSZ_Call{Call: _e.mock.On("SizeSSZ")}
}

func (_c *BeaconBlockBody_SizeSSZ_Call) Run(run func()) *BeaconBlockBody_SizeSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconBlockBody_SizeSSZ_Call) Return(_a0 int) *BeaconBlockBody_SizeSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_SizeSSZ_Call) RunAndReturn(run func() int) *BeaconBlockBody_SizeSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: buf
func (_m *BeaconBlockBody) UnmarshalSSZ(buf []byte) error {
	ret := _m.Called(buf)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeaconBlockBody_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type BeaconBlockBody_UnmarshalSSZ_Call struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - buf []byte
func (_e *BeaconBlockBody_Expecter) UnmarshalSSZ(buf interface{}) *BeaconBlockBody_UnmarshalSSZ_Call {
	return &BeaconBlockBody_UnmarshalSSZ_Call{Call: _e.mock.On("UnmarshalSSZ", buf)}
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call) Run(run func(buf []byte)) *BeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call) Return(_a0 error) *BeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconBlockBody_UnmarshalSSZ_Call) RunAndReturn(run func([]byte) error) *BeaconBlockBody_UnmarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// NewBeaconBlockBody creates a new instance of BeaconBlockBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconBlockBody(t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconBlockBody {
	mock := &BeaconBlockBody{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

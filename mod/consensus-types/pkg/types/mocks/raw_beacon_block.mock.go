// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"
	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	ssz "github.com/ferranbt/fastssz"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// RawBeaconBlock is an autogenerated mock type for the RawBeaconBlock type
type RawBeaconBlock struct {
	mock.Mock
}

type RawBeaconBlock_Expecter struct {
	mock *mock.Mock
}

func (_m *RawBeaconBlock) EXPECT() *RawBeaconBlock_Expecter {
	return &RawBeaconBlock_Expecter{mock: &_m.Mock}
}

// GetBody provides a mock function with given fields:
func (_m *RawBeaconBlock) GetBody() types.BeaconBlockBody {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 types.BeaconBlockBody
	if rf, ok := ret.Get(0).(func() types.BeaconBlockBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.BeaconBlockBody)
		}
	}

	return r0
}

// RawBeaconBlock_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type RawBeaconBlock_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetBody() *RawBeaconBlock_GetBody_Call {
	return &RawBeaconBlock_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *RawBeaconBlock_GetBody_Call) Run(run func()) *RawBeaconBlock_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetBody_Call) Return(_a0 types.BeaconBlockBody) *RawBeaconBlock_GetBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetBody_Call) RunAndReturn(run func() types.BeaconBlockBody) *RawBeaconBlock_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields:
func (_m *RawBeaconBlock) GetHeader() *types.BeaconBlockHeader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 *types.BeaconBlockHeader
	if rf, ok := ret.Get(0).(func() *types.BeaconBlockHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BeaconBlockHeader)
		}
	}

	return r0
}

// RawBeaconBlock_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type RawBeaconBlock_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetHeader() *RawBeaconBlock_GetHeader_Call {
	return &RawBeaconBlock_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *RawBeaconBlock_GetHeader_Call) Run(run func()) *RawBeaconBlock_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetHeader_Call) Return(_a0 *types.BeaconBlockHeader) *RawBeaconBlock_GetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetHeader_Call) RunAndReturn(run func() *types.BeaconBlockHeader) *RawBeaconBlock_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentBlockRoot provides a mock function with given fields:
func (_m *RawBeaconBlock) GetParentBlockRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentBlockRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// RawBeaconBlock_GetParentBlockRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentBlockRoot'
type RawBeaconBlock_GetParentBlockRoot_Call struct {
	*mock.Call
}

// GetParentBlockRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetParentBlockRoot() *RawBeaconBlock_GetParentBlockRoot_Call {
	return &RawBeaconBlock_GetParentBlockRoot_Call{Call: _e.mock.On("GetParentBlockRoot")}
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call) Run(run func()) *RawBeaconBlock_GetParentBlockRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call) Return(_a0 bytes.B32) *RawBeaconBlock_GetParentBlockRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetParentBlockRoot_Call) RunAndReturn(run func() bytes.B32) *RawBeaconBlock_GetParentBlockRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposerIndex provides a mock function with given fields:
func (_m *RawBeaconBlock) GetProposerIndex() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProposerIndex")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// RawBeaconBlock_GetProposerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposerIndex'
type RawBeaconBlock_GetProposerIndex_Call struct {
	*mock.Call
}

// GetProposerIndex is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetProposerIndex() *RawBeaconBlock_GetProposerIndex_Call {
	return &RawBeaconBlock_GetProposerIndex_Call{Call: _e.mock.On("GetProposerIndex")}
}

func (_c *RawBeaconBlock_GetProposerIndex_Call) Run(run func()) *RawBeaconBlock_GetProposerIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetProposerIndex_Call) Return(_a0 math.U64) *RawBeaconBlock_GetProposerIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetProposerIndex_Call) RunAndReturn(run func() math.U64) *RawBeaconBlock_GetProposerIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *RawBeaconBlock) GetSlot() math.U64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	return r0
}

// RawBeaconBlock_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type RawBeaconBlock_GetSlot_Call struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetSlot() *RawBeaconBlock_GetSlot_Call {
	return &RawBeaconBlock_GetSlot_Call{Call: _e.mock.On("GetSlot")}
}

func (_c *RawBeaconBlock_GetSlot_Call) Run(run func()) *RawBeaconBlock_GetSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetSlot_Call) Return(_a0 math.U64) *RawBeaconBlock_GetSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetSlot_Call) RunAndReturn(run func() math.U64) *RawBeaconBlock_GetSlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateRoot provides a mock function with given fields:
func (_m *RawBeaconBlock) GetStateRoot() bytes.B32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateRoot")
	}

	var r0 bytes.B32
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	return r0
}

// RawBeaconBlock_GetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateRoot'
type RawBeaconBlock_GetStateRoot_Call struct {
	*mock.Call
}

// GetStateRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetStateRoot() *RawBeaconBlock_GetStateRoot_Call {
	return &RawBeaconBlock_GetStateRoot_Call{Call: _e.mock.On("GetStateRoot")}
}

func (_c *RawBeaconBlock_GetStateRoot_Call) Run(run func()) *RawBeaconBlock_GetStateRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetStateRoot_Call) Return(_a0 bytes.B32) *RawBeaconBlock_GetStateRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_GetStateRoot_Call) RunAndReturn(run func() bytes.B32) *RawBeaconBlock_GetStateRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTree provides a mock function with given fields:
func (_m *RawBeaconBlock) GetTree() (*ssz.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTree")
	}

	var r0 *ssz.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ssz.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ssz.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssz.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_GetTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTree'
type RawBeaconBlock_GetTree_Call struct {
	*mock.Call
}

// GetTree is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) GetTree() *RawBeaconBlock_GetTree_Call {
	return &RawBeaconBlock_GetTree_Call{Call: _e.mock.On("GetTree")}
}

func (_c *RawBeaconBlock_GetTree_Call) Run(run func()) *RawBeaconBlock_GetTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_GetTree_Call) Return(_a0 *ssz.Node, _a1 error) *RawBeaconBlock_GetTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_GetTree_Call) RunAndReturn(run func() (*ssz.Node, error)) *RawBeaconBlock_GetTree_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRoot provides a mock function with given fields:
func (_m *RawBeaconBlock) HashTreeRoot() ([32]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRoot")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([32]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_HashTreeRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRoot'
type RawBeaconBlock_HashTreeRoot_Call struct {
	*mock.Call
}

// HashTreeRoot is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) HashTreeRoot() *RawBeaconBlock_HashTreeRoot_Call {
	return &RawBeaconBlock_HashTreeRoot_Call{Call: _e.mock.On("HashTreeRoot")}
}

func (_c *RawBeaconBlock_HashTreeRoot_Call) Run(run func()) *RawBeaconBlock_HashTreeRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_HashTreeRoot_Call) Return(_a0 [32]byte, _a1 error) *RawBeaconBlock_HashTreeRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_HashTreeRoot_Call) RunAndReturn(run func() ([32]byte, error)) *RawBeaconBlock_HashTreeRoot_Call {
	_c.Call.Return(run)
	return _c
}

// HashTreeRootWith provides a mock function with given fields: hh
func (_m *RawBeaconBlock) HashTreeRootWith(hh ssz.HashWalker) error {
	ret := _m.Called(hh)

	if len(ret) == 0 {
		panic("no return value specified for HashTreeRootWith")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ssz.HashWalker) error); ok {
		r0 = rf(hh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawBeaconBlock_HashTreeRootWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTreeRootWith'
type RawBeaconBlock_HashTreeRootWith_Call struct {
	*mock.Call
}

// HashTreeRootWith is a helper method to define mock.On call
//   - hh ssz.HashWalker
func (_e *RawBeaconBlock_Expecter) HashTreeRootWith(hh interface{}) *RawBeaconBlock_HashTreeRootWith_Call {
	return &RawBeaconBlock_HashTreeRootWith_Call{Call: _e.mock.On("HashTreeRootWith", hh)}
}

func (_c *RawBeaconBlock_HashTreeRootWith_Call) Run(run func(hh ssz.HashWalker)) *RawBeaconBlock_HashTreeRootWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ssz.HashWalker))
	})
	return _c
}

func (_c *RawBeaconBlock_HashTreeRootWith_Call) Return(_a0 error) *RawBeaconBlock_HashTreeRootWith_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_HashTreeRootWith_Call) RunAndReturn(run func(ssz.HashWalker) error) *RawBeaconBlock_HashTreeRootWith_Call {
	_c.Call.Return(run)
	return _c
}

// IsNil provides a mock function with given fields:
func (_m *RawBeaconBlock) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RawBeaconBlock_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type RawBeaconBlock_IsNil_Call struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) IsNil() *RawBeaconBlock_IsNil_Call {
	return &RawBeaconBlock_IsNil_Call{Call: _e.mock.On("IsNil")}
}

func (_c *RawBeaconBlock_IsNil_Call) Run(run func()) *RawBeaconBlock_IsNil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_IsNil_Call) Return(_a0 bool) *RawBeaconBlock_IsNil_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_IsNil_Call) RunAndReturn(run func() bool) *RawBeaconBlock_IsNil_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZ provides a mock function with given fields:
func (_m *RawBeaconBlock) MarshalSSZ() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZ")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_MarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZ'
type RawBeaconBlock_MarshalSSZ_Call struct {
	*mock.Call
}

// MarshalSSZ is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) MarshalSSZ() *RawBeaconBlock_MarshalSSZ_Call {
	return &RawBeaconBlock_MarshalSSZ_Call{Call: _e.mock.On("MarshalSSZ")}
}

func (_c *RawBeaconBlock_MarshalSSZ_Call) Run(run func()) *RawBeaconBlock_MarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZ_Call) Return(_a0 []byte, _a1 error) *RawBeaconBlock_MarshalSSZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZ_Call) RunAndReturn(run func() ([]byte, error)) *RawBeaconBlock_MarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalSSZTo provides a mock function with given fields: dst
func (_m *RawBeaconBlock) MarshalSSZTo(dst []byte) ([]byte, error) {
	ret := _m.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSSZTo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(dst)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(dst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(dst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawBeaconBlock_MarshalSSZTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSSZTo'
type RawBeaconBlock_MarshalSSZTo_Call struct {
	*mock.Call
}

// MarshalSSZTo is a helper method to define mock.On call
//   - dst []byte
func (_e *RawBeaconBlock_Expecter) MarshalSSZTo(dst interface{}) *RawBeaconBlock_MarshalSSZTo_Call {
	return &RawBeaconBlock_MarshalSSZTo_Call{Call: _e.mock.On("MarshalSSZTo", dst)}
}

func (_c *RawBeaconBlock_MarshalSSZTo_Call) Run(run func(dst []byte)) *RawBeaconBlock_MarshalSSZTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZTo_Call) Return(_a0 []byte, _a1 error) *RawBeaconBlock_MarshalSSZTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawBeaconBlock_MarshalSSZTo_Call) RunAndReturn(run func([]byte) ([]byte, error)) *RawBeaconBlock_MarshalSSZTo_Call {
	_c.Call.Return(run)
	return _c
}

// SetStateRoot provides a mock function with given fields: _a0
func (_m *RawBeaconBlock) SetStateRoot(_a0 bytes.B32) {
	_m.Called(_a0)
}

// RawBeaconBlock_SetStateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateRoot'
type RawBeaconBlock_SetStateRoot_Call struct {
	*mock.Call
}

// SetStateRoot is a helper method to define mock.On call
//   - _a0 bytes.B32
func (_e *RawBeaconBlock_Expecter) SetStateRoot(_a0 interface{}) *RawBeaconBlock_SetStateRoot_Call {
	return &RawBeaconBlock_SetStateRoot_Call{Call: _e.mock.On("SetStateRoot", _a0)}
}

func (_c *RawBeaconBlock_SetStateRoot_Call) Run(run func(_a0 bytes.B32)) *RawBeaconBlock_SetStateRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B32))
	})
	return _c
}

func (_c *RawBeaconBlock_SetStateRoot_Call) Return() *RawBeaconBlock_SetStateRoot_Call {
	_c.Call.Return()
	return _c
}

func (_c *RawBeaconBlock_SetStateRoot_Call) RunAndReturn(run func(bytes.B32)) *RawBeaconBlock_SetStateRoot_Call {
	_c.Call.Return(run)
	return _c
}

// SizeSSZ provides a mock function with given fields:
func (_m *RawBeaconBlock) SizeSSZ() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SizeSSZ")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RawBeaconBlock_SizeSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SizeSSZ'
type RawBeaconBlock_SizeSSZ_Call struct {
	*mock.Call
}

// SizeSSZ is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) SizeSSZ() *RawBeaconBlock_SizeSSZ_Call {
	return &RawBeaconBlock_SizeSSZ_Call{Call: _e.mock.On("SizeSSZ")}
}

func (_c *RawBeaconBlock_SizeSSZ_Call) Run(run func()) *RawBeaconBlock_SizeSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_SizeSSZ_Call) Return(_a0 int) *RawBeaconBlock_SizeSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_SizeSSZ_Call) RunAndReturn(run func() int) *RawBeaconBlock_SizeSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSSZ provides a mock function with given fields: buf
func (_m *RawBeaconBlock) UnmarshalSSZ(buf []byte) error {
	ret := _m.Called(buf)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSSZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawBeaconBlock_UnmarshalSSZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSSZ'
type RawBeaconBlock_UnmarshalSSZ_Call struct {
	*mock.Call
}

// UnmarshalSSZ is a helper method to define mock.On call
//   - buf []byte
func (_e *RawBeaconBlock_Expecter) UnmarshalSSZ(buf interface{}) *RawBeaconBlock_UnmarshalSSZ_Call {
	return &RawBeaconBlock_UnmarshalSSZ_Call{Call: _e.mock.On("UnmarshalSSZ", buf)}
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call) Run(run func(buf []byte)) *RawBeaconBlock_UnmarshalSSZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call) Return(_a0 error) *RawBeaconBlock_UnmarshalSSZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_UnmarshalSSZ_Call) RunAndReturn(run func([]byte) error) *RawBeaconBlock_UnmarshalSSZ_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *RawBeaconBlock) Version() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// RawBeaconBlock_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type RawBeaconBlock_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *RawBeaconBlock_Expecter) Version() *RawBeaconBlock_Version_Call {
	return &RawBeaconBlock_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *RawBeaconBlock_Version_Call) Run(run func()) *RawBeaconBlock_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RawBeaconBlock_Version_Call) Return(_a0 uint32) *RawBeaconBlock_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawBeaconBlock_Version_Call) RunAndReturn(run func() uint32) *RawBeaconBlock_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewRawBeaconBlock creates a new instance of RawBeaconBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRawBeaconBlock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RawBeaconBlock {
	mock := &RawBeaconBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

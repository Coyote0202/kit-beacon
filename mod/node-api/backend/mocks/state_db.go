// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	engineprimitives "github.com/berachain/beacon-kit/mod/engine-primitives/pkg/engine-primitives"

	bytes "github.com/berachain/beacon-kit/mod/primitives/pkg/bytes"

	math "github.com/berachain/beacon-kit/mod/primitives/pkg/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/berachain/beacon-kit/mod/consensus-types/pkg/types"
)

// StateDB is an autogenerated mock type for the StateDB type
type StateDB struct {
	mock.Mock
}

type StateDB_Expecter struct {
	mock *mock.Mock
}

func (_m *StateDB) EXPECT() *StateDB_Expecter {
	return &StateDB_Expecter{mock: &_m.Mock}
}

// AddValidator provides a mock function with given fields: val
func (_m *StateDB) AddValidator(val *types.Validator) error {
	ret := _m.Called(val)

	if len(ret) == 0 {
		panic("no return value specified for AddValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Validator) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_AddValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddValidator'
type StateDB_AddValidator_Call struct {
	*mock.Call
}

// AddValidator is a helper method to define mock.On call
//   - val *types.Validator
func (_e *StateDB_Expecter) AddValidator(val interface{}) *StateDB_AddValidator_Call {
	return &StateDB_AddValidator_Call{Call: _e.mock.On("AddValidator", val)}
}

func (_c *StateDB_AddValidator_Call) Run(run func(val *types.Validator)) *StateDB_AddValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Validator))
	})
	return _c
}

func (_c *StateDB_AddValidator_Call) Return(_a0 error) *StateDB_AddValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_AddValidator_Call) RunAndReturn(run func(*types.Validator) error) *StateDB_AddValidator_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: idx
func (_m *StateDB) GetBalance(idx math.U64) (math.U64, error) {
	ret := _m.Called(idx)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (math.U64, error)); ok {
		return rf(idx)
	}
	if rf, ok := ret.Get(0).(func(math.U64) math.U64); ok {
		r0 = rf(idx)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(idx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type StateDB_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - idx math.U64
func (_e *StateDB_Expecter) GetBalance(idx interface{}) *StateDB_GetBalance_Call {
	return &StateDB_GetBalance_Call{Call: _e.mock.On("GetBalance", idx)}
}

func (_c *StateDB_GetBalance_Call) Run(run func(idx math.U64)) *StateDB_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateDB_GetBalance_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetBalance_Call) RunAndReturn(run func(math.U64) (math.U64, error)) *StateDB_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalances provides a mock function with given fields:
func (_m *StateDB) GetBalances() ([]uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 []uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalances'
type StateDB_GetBalances_Call struct {
	*mock.Call
}

// GetBalances is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetBalances() *StateDB_GetBalances_Call {
	return &StateDB_GetBalances_Call{Call: _e.mock.On("GetBalances")}
}

func (_c *StateDB_GetBalances_Call) Run(run func()) *StateDB_GetBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetBalances_Call) Return(_a0 []uint64, _a1 error) *StateDB_GetBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetBalances_Call) RunAndReturn(run func() ([]uint64, error)) *StateDB_GetBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockRootAtIndex provides a mock function with given fields: index
func (_m *StateDB) GetBlockRootAtIndex(index uint64) (bytes.B32, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockRootAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockRootAtIndex'
type StateDB_GetBlockRootAtIndex_Call struct {
	*mock.Call
}

// GetBlockRootAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) GetBlockRootAtIndex(index interface{}) *StateDB_GetBlockRootAtIndex_Call {
	return &StateDB_GetBlockRootAtIndex_Call{Call: _e.mock.On("GetBlockRootAtIndex", index)}
}

func (_c *StateDB_GetBlockRootAtIndex_Call) Run(run func(index uint64)) *StateDB_GetBlockRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_GetBlockRootAtIndex_Call) Return(_a0 bytes.B32, _a1 error) *StateDB_GetBlockRootAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetBlockRootAtIndex_Call) RunAndReturn(run func(uint64) (bytes.B32, error)) *StateDB_GetBlockRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1Data provides a mock function with given fields:
func (_m *StateDB) GetEth1Data() (*types.Eth1Data, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1Data")
	}

	var r0 *types.Eth1Data
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Eth1Data, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Eth1Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Eth1Data)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1Data'
type StateDB_GetEth1Data_Call struct {
	*mock.Call
}

// GetEth1Data is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetEth1Data() *StateDB_GetEth1Data_Call {
	return &StateDB_GetEth1Data_Call{Call: _e.mock.On("GetEth1Data")}
}

func (_c *StateDB_GetEth1Data_Call) Run(run func()) *StateDB_GetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetEth1Data_Call) Return(_a0 *types.Eth1Data, _a1 error) *StateDB_GetEth1Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetEth1Data_Call) RunAndReturn(run func() (*types.Eth1Data, error)) *StateDB_GetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// GetEth1DepositIndex provides a mock function with given fields:
func (_m *StateDB) GetEth1DepositIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEth1DepositIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEth1DepositIndex'
type StateDB_GetEth1DepositIndex_Call struct {
	*mock.Call
}

// GetEth1DepositIndex is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetEth1DepositIndex() *StateDB_GetEth1DepositIndex_Call {
	return &StateDB_GetEth1DepositIndex_Call{Call: _e.mock.On("GetEth1DepositIndex")}
}

func (_c *StateDB_GetEth1DepositIndex_Call) Run(run func()) *StateDB_GetEth1DepositIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetEth1DepositIndex_Call) Return(_a0 uint64, _a1 error) *StateDB_GetEth1DepositIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetEth1DepositIndex_Call) RunAndReturn(run func() (uint64, error)) *StateDB_GetEth1DepositIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetFork provides a mock function with given fields:
func (_m *StateDB) GetFork() (*types.Fork, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFork")
	}

	var r0 *types.Fork
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Fork, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Fork); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Fork)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB__Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFork'
type StateDB_GetFork_Call struct {
	*mock.Call
}

// GetFork is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetFork() *StateDB_GetFork_Call {
	return &StateDB_GetFork_Call{Call: _e.mock.On("GetFork")}
}

func (_c *StateDB_GetFork_Call) Run(run func()) *StateDB_GetFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetFork_Call) Return(_a0 *types.Fork, _a1 error) *StateDB_GetFork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetFork_Call) RunAndReturn(run func() (*types.Fork, error)) *StateDB_GetFork_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenesisValidatorsRoot provides a mock function with given fields:
func (_m *StateDB) GetGenesisValidatorsRoot() (bytes.B32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenesisValidatorsRoot")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func() (bytes.B32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bytes.B32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetGenesisValidatorsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenesisValidatorsRoot'
type StateDB_GetGenesisValidatorsRoot_Call struct {
	*mock.Call
}

// GetGenesisValidatorsRoot is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetGenesisValidatorsRoot() *StateDB_GetGenesisValidatorsRoot_Call {
	return &StateDB_GetGenesisValidatorsRoot_Call{Call: _e.mock.On("GetGenesisValidatorsRoot")}
}

func (_c *StateDB_GetGenesisValidatorsRoot_Call) Run(run func()) *StateDB_GetGenesisValidatorsRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetGenesisValidatorsRoot_Call) Return(_a0 bytes.B32, _a1 error) *StateDB_GetGenesisValidatorsRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetGenesisValidatorsRoot_Call) RunAndReturn(run func() (bytes.B32, error)) *StateDB_GetGenesisValidatorsRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockHeader provides a mock function with given fields:
func (_m *StateDB) GetLatestBlockHeader() (*types.BeaconBlockHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockHeader")
	}

	var r0 *types.BeaconBlockHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.BeaconBlockHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.BeaconBlockHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BeaconBlockHeader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockHeader'
type StateDB_GetLatestBlockHeader_Call struct {
	*mock.Call
}

// GetLatestBlockHeader is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetLatestBlockHeader() *StateDB_GetLatestBlockHeader_Call {
	return &StateDB_GetLatestBlockHeader_Call{Call: _e.mock.On("GetLatestBlockHeader")}
}

func (_c *StateDB_GetLatestBlockHeader_Call) Run(run func()) *StateDB_GetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetLatestBlockHeader_Call) Return(_a0 *types.BeaconBlockHeader, _a1 error) *StateDB_GetLatestBlockHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetLatestBlockHeader_Call) RunAndReturn(run func() (*types.BeaconBlockHeader, error)) *StateDB_GetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestExecutionPayloadHeader provides a mock function with given fields:
func (_m *StateDB) GetLatestExecutionPayloadHeader() (engineprimitives.ExecutionPayloadHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestExecutionPayloadHeader")
	}

	var r0 engineprimitives.ExecutionPayloadHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (engineprimitives.ExecutionPayloadHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() engineprimitives.ExecutionPayloadHeader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engineprimitives.ExecutionPayloadHeader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestExecutionPayloadHeader'
type StateDB_GetLatestExecutionPayloadHeader_Call struct {
	*mock.Call
}

// GetLatestExecutionPayloadHeader is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetLatestExecutionPayloadHeader() *StateDB_GetLatestExecutionPayloadHeader_Call {
	return &StateDB_GetLatestExecutionPayloadHeader_Call{Call: _e.mock.On("GetLatestExecutionPayloadHeader")}
}

func (_c *StateDB_GetLatestExecutionPayloadHeader_Call) Run(run func()) *StateDB_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetLatestExecutionPayloadHeader_Call) Return(_a0 engineprimitives.ExecutionPayloadHeader, _a1 error) *StateDB_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetLatestExecutionPayloadHeader_Call) RunAndReturn(run func() (engineprimitives.ExecutionPayloadHeader, error)) *StateDB_GetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalIndex provides a mock function with given fields:
func (_m *StateDB) GetNextWithdrawalIndex() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalIndex")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalIndex'
type StateDB_GetNextWithdrawalIndex_Call struct {
	*mock.Call
}

// GetNextWithdrawalIndex is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetNextWithdrawalIndex() *StateDB_GetNextWithdrawalIndex_Call {
	return &StateDB_GetNextWithdrawalIndex_Call{Call: _e.mock.On("GetNextWithdrawalIndex")}
}

func (_c *StateDB_GetNextWithdrawalIndex_Call) Run(run func()) *StateDB_GetNextWithdrawalIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetNextWithdrawalIndex_Call) Return(_a0 uint64, _a1 error) *StateDB_GetNextWithdrawalIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetNextWithdrawalIndex_Call) RunAndReturn(run func() (uint64, error)) *StateDB_GetNextWithdrawalIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextWithdrawalValidatorIndex provides a mock function with given fields:
func (_m *StateDB) GetNextWithdrawalValidatorIndex() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextWithdrawalValidatorIndex")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWithdrawalValidatorIndex'
type StateDB_GetNextWithdrawalValidatorIndex_Call struct {
	*mock.Call
}

// GetNextWithdrawalValidatorIndex is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetNextWithdrawalValidatorIndex() *StateDB_GetNextWithdrawalValidatorIndex_Call {
	return &StateDB_GetNextWithdrawalValidatorIndex_Call{Call: _e.mock.On("GetNextWithdrawalValidatorIndex")}
}

func (_c *StateDB_GetNextWithdrawalValidatorIndex_Call) Run(run func()) *StateDB_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetNextWithdrawalValidatorIndex_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetNextWithdrawalValidatorIndex_Call) RunAndReturn(run func() (math.U64, error)) *StateDB_GetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetRandaoMixAtIndex provides a mock function with given fields: index
func (_m *StateDB) GetRandaoMixAtIndex(index uint64) (bytes.B32, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetRandaoMixAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandaoMixAtIndex'
type StateDB_GetRandaoMixAtIndex_Call struct {
	*mock.Call
}

// GetRandaoMixAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) GetRandaoMixAtIndex(index interface{}) *StateDB_GetRandaoMixAtIndex_Call {
	return &StateDB_GetRandaoMixAtIndex_Call{Call: _e.mock.On("GetRandaoMixAtIndex", index)}
}

func (_c *StateDB_GetRandaoMixAtIndex_Call) Run(run func(index uint64)) *StateDB_GetRandaoMixAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_GetRandaoMixAtIndex_Call) Return(_a0 bytes.B32, _a1 error) *StateDB_GetRandaoMixAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetRandaoMixAtIndex_Call) RunAndReturn(run func(uint64) (bytes.B32, error)) *StateDB_GetRandaoMixAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlashingAtIndex provides a mock function with given fields: index
func (_m *StateDB) GetSlashingAtIndex(index uint64) (math.U64, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetSlashingAtIndex")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.U64, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.U64); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlashingAtIndex'
type StateDB_GetSlashingAtIndex_Call struct {
	*mock.Call
}

// GetSlashingAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) GetSlashingAtIndex(index interface{}) *StateDB_GetSlashingAtIndex_Call {
	return &StateDB_GetSlashingAtIndex_Call{Call: _e.mock.On("GetSlashingAtIndex", index)}
}

func (_c *StateDB_GetSlashingAtIndex_Call) Run(run func(index uint64)) *StateDB_GetSlashingAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_GetSlashingAtIndex_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetSlashingAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetSlashingAtIndex_Call) RunAndReturn(run func(uint64) (math.U64, error)) *StateDB_GetSlashingAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlashings provides a mock function with given fields:
func (_m *StateDB) GetSlashings() ([]uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlashings")
	}

	var r0 []uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetSlashings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlashings'
type StateDB_GetSlashings_Call struct {
	*mock.Call
}

// GetSlashings is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetSlashings() *StateDB_GetSlashings_Call {
	return &StateDB_GetSlashings_Call{Call: _e.mock.On("GetSlashings")}
}

func (_c *StateDB_GetSlashings_Call) Run(run func()) *StateDB_GetSlashings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetSlashings_Call) Return(_a0 []uint64, _a1 error) *StateDB_GetSlashings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetSlashings_Call) RunAndReturn(run func() ([]uint64, error)) *StateDB_GetSlashings_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlot provides a mock function with given fields:
func (_m *StateDB) GetSlot() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSlot")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlot'
type StateDB_GetSlot_Call struct {
	*mock.Call
}

// GetSlot is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetSlot() *StateDB_GetSlot_Call {
	return &StateDB_GetSlot_Call{Call: _e.mock.On("GetSlot")}
}

func (_c *StateDB_GetSlot_Call) Run(run func()) *StateDB_GetSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetSlot_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetSlot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetSlot_Call) RunAndReturn(run func() (math.U64, error)) *StateDB_GetSlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalActiveBalances provides a mock function with given fields: _a0
func (_m *StateDB) GetTotalActiveBalances(_a0 uint64) (math.U64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalActiveBalances")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (math.U64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint64) math.U64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetTotalActiveBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalActiveBalances'
type StateDB_GetTotalActiveBalances_Call struct {
	*mock.Call
}

// GetTotalActiveBalances is a helper method to define mock.On call
//   - _a0 uint64
func (_e *StateDB_Expecter) GetTotalActiveBalances(_a0 interface{}) *StateDB_GetTotalActiveBalances_Call {
	return &StateDB_GetTotalActiveBalances_Call{Call: _e.mock.On("GetTotalActiveBalances", _a0)}
}

func (_c *StateDB_GetTotalActiveBalances_Call) Run(run func(_a0 uint64)) *StateDB_GetTotalActiveBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_GetTotalActiveBalances_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetTotalActiveBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetTotalActiveBalances_Call) RunAndReturn(run func(uint64) (math.U64, error)) *StateDB_GetTotalActiveBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalSlashing provides a mock function with given fields:
func (_m *StateDB) GetTotalSlashing() (math.U64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalSlashing")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func() (math.U64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() math.U64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalSlashing'
type StateDB_GetTotalSlashing_Call struct {
	*mock.Call
}

// GetTotalSlashing is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetTotalSlashing() *StateDB_GetTotalSlashing_Call {
	return &StateDB_GetTotalSlashing_Call{Call: _e.mock.On("GetTotalSlashing")}
}

func (_c *StateDB_GetTotalSlashing_Call) Run(run func()) *StateDB_GetTotalSlashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetTotalSlashing_Call) Return(_a0 math.U64, _a1 error) *StateDB_GetTotalSlashing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetTotalSlashing_Call) RunAndReturn(run func() (math.U64, error)) *StateDB_GetTotalSlashing_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalValidators provides a mock function with given fields:
func (_m *StateDB) GetTotalValidators() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalValidators")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetTotalValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalValidators'
type StateDB_GetTotalValidators_Call struct {
	*mock.Call
}

// GetTotalValidators is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetTotalValidators() *StateDB_GetTotalValidators_Call {
	return &StateDB_GetTotalValidators_Call{Call: _e.mock.On("GetTotalValidators")}
}

func (_c *StateDB_GetTotalValidators_Call) Run(run func()) *StateDB_GetTotalValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetTotalValidators_Call) Return(_a0 uint64, _a1 error) *StateDB_GetTotalValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetTotalValidators_Call) RunAndReturn(run func() (uint64, error)) *StateDB_GetTotalValidators_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidators provides a mock function with given fields:
func (_m *StateDB) GetValidators() ([]*types.Validator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidators")
	}

	var r0 []*types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Validator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Validator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
type StateDB_GetValidators_Call struct {
	*mock.Call
}

// GetValidators is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetValidators() *StateDB_GetValidators_Call {
	return &StateDB_GetValidators_Call{Call: _e.mock.On("GetValidators")}
}

func (_c *StateDB_GetValidators_Call) Run(run func()) *StateDB_GetValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetValidators_Call) Return(_a0 []*types.Validator, _a1 error) *StateDB_GetValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetValidators_Call) RunAndReturn(run func() ([]*types.Validator, error)) *StateDB_GetValidators_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatorsByEffectiveBalance provides a mock function with given fields:
func (_m *StateDB) GetValidatorsByEffectiveBalance() ([]*types.Validator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorsByEffectiveBalance")
	}

	var r0 []*types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Validator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Validator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_GetValidatorsByEffectiveBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsByEffectiveBalance'
type StateDB_GetValidatorsByEffectiveBalance_Call struct {
	*mock.Call
}

// GetValidatorsByEffectiveBalance is a helper method to define mock.On call
func (_e *StateDB_Expecter) GetValidatorsByEffectiveBalance() *StateDB_GetValidatorsByEffectiveBalance_Call {
	return &StateDB_GetValidatorsByEffectiveBalance_Call{Call: _e.mock.On("GetValidatorsByEffectiveBalance")}
}

func (_c *StateDB_GetValidatorsByEffectiveBalance_Call) Run(run func()) *StateDB_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetValidatorsByEffectiveBalance_Call) Return(_a0 []*types.Validator, _a1 error) *StateDB_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_GetValidatorsByEffectiveBalance_Call) RunAndReturn(run func() ([]*types.Validator, error)) *StateDB_GetValidatorsByEffectiveBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SetBalance provides a mock function with given fields: idx, balance
func (_m *StateDB) SetBalance(idx math.U64, balance math.U64) error {
	ret := _m.Called(idx, balance)

	if len(ret) == 0 {
		panic("no return value specified for SetBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, math.U64) error); ok {
		r0 = rf(idx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBalance'
type StateDB_SetBalance_Call struct {
	*mock.Call
}

// SetBalance is a helper method to define mock.On call
//   - idx math.U64
//   - balance math.U64
func (_e *StateDB_Expecter) SetBalance(idx interface{}, balance interface{}) *StateDB_SetBalance_Call {
	return &StateDB_SetBalance_Call{Call: _e.mock.On("SetBalance", idx, balance)}
}

func (_c *StateDB_SetBalance_Call) Run(run func(idx math.U64, balance math.U64)) *StateDB_SetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(math.U64))
	})
	return _c
}

func (_c *StateDB_SetBalance_Call) Return(_a0 error) *StateDB_SetBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetBalance_Call) RunAndReturn(run func(math.U64, math.U64) error) *StateDB_SetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1Data provides a mock function with given fields: data
func (_m *StateDB) SetEth1Data(data *types.Eth1Data) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1Data")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Eth1Data) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetEth1Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1Data'
type StateDB_SetEth1Data_Call struct {
	*mock.Call
}

// SetEth1Data is a helper method to define mock.On call
//   - data *types.Eth1Data
func (_e *StateDB_Expecter) SetEth1Data(data interface{}) *StateDB_SetEth1Data_Call {
	return &StateDB_SetEth1Data_Call{Call: _e.mock.On("SetEth1Data", data)}
}

func (_c *StateDB_SetEth1Data_Call) Run(run func(data *types.Eth1Data)) *StateDB_SetEth1Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Eth1Data))
	})
	return _c
}

func (_c *StateDB_SetEth1Data_Call) Return(_a0 error) *StateDB_SetEth1Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetEth1Data_Call) RunAndReturn(run func(*types.Eth1Data) error) *StateDB_SetEth1Data_Call {
	_c.Call.Return(run)
	return _c
}

// SetEth1DepositIndex provides a mock function with given fields: index
func (_m *StateDB) SetEth1DepositIndex(index uint64) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for SetEth1DepositIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetEth1DepositIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEth1DepositIndex'
type StateDB_SetEth1DepositIndex_Call struct {
	*mock.Call
}

// SetEth1DepositIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) SetEth1DepositIndex(index interface{}) *StateDB_SetEth1DepositIndex_Call {
	return &StateDB_SetEth1DepositIndex_Call{Call: _e.mock.On("SetEth1DepositIndex", index)}
}

func (_c *StateDB_SetEth1DepositIndex_Call) Run(run func(index uint64)) *StateDB_SetEth1DepositIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_SetEth1DepositIndex_Call) Return(_a0 error) *StateDB_SetEth1DepositIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetEth1DepositIndex_Call) RunAndReturn(run func(uint64) error) *StateDB_SetEth1DepositIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetFork provides a mock function with given fields: fork
func (_m *StateDB) SetFork(fork *types.Fork) error {
	ret := _m.Called(fork)

	if len(ret) == 0 {
		panic("no return value specified for SetFork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Fork) error); ok {
		r0 = rf(fork)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFork'
type StateDB_SetFork_Call struct {
	*mock.Call
}

// SetFork is a helper method to define mock.On call
//   - fork *types.Fork
func (_e *StateDB_Expecter) SetFork(fork interface{}) *StateDB_SetFork_Call {
	return &StateDB_SetFork_Call{Call: _e.mock.On("SetFork", fork)}
}

func (_c *StateDB_SetFork_Call) Run(run func(fork *types.Fork)) *StateDB_SetFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Fork))
	})
	return _c
}

func (_c *StateDB_SetFork_Call) Return(_a0 error) *StateDB_SetFork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetFork_Call) RunAndReturn(run func(*types.Fork) error) *StateDB_SetFork_Call {
	_c.Call.Return(run)
	return _c
}

// SetLatestBlockHeader provides a mock function with given fields: header
func (_m *StateDB) SetLatestBlockHeader(header *types.BeaconBlockHeader) error {
	ret := _m.Called(header)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestBlockHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.BeaconBlockHeader) error); ok {
		r0 = rf(header)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetLatestBlockHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestBlockHeader'
type StateDB_SetLatestBlockHeader_Call struct {
	*mock.Call
}

// SetLatestBlockHeader is a helper method to define mock.On call
//   - header *types.BeaconBlockHeader
func (_e *StateDB_Expecter) SetLatestBlockHeader(header interface{}) *StateDB_SetLatestBlockHeader_Call {
	return &StateDB_SetLatestBlockHeader_Call{Call: _e.mock.On("SetLatestBlockHeader", header)}
}

func (_c *StateDB_SetLatestBlockHeader_Call) Run(run func(header *types.BeaconBlockHeader)) *StateDB_SetLatestBlockHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.BeaconBlockHeader))
	})
	return _c
}

func (_c *StateDB_SetLatestBlockHeader_Call) Return(_a0 error) *StateDB_SetLatestBlockHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetLatestBlockHeader_Call) RunAndReturn(run func(*types.BeaconBlockHeader) error) *StateDB_SetLatestBlockHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetLatestExecutionPayloadHeader provides a mock function with given fields: payloadHeader
func (_m *StateDB) SetLatestExecutionPayloadHeader(payloadHeader engineprimitives.ExecutionPayloadHeader) error {
	ret := _m.Called(payloadHeader)

	if len(ret) == 0 {
		panic("no return value specified for SetLatestExecutionPayloadHeader")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(engineprimitives.ExecutionPayloadHeader) error); ok {
		r0 = rf(payloadHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetLatestExecutionPayloadHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLatestExecutionPayloadHeader'
type StateDB_SetLatestExecutionPayloadHeader_Call struct {
	*mock.Call
}

// SetLatestExecutionPayloadHeader is a helper method to define mock.On call
//   - payloadHeader engineprimitives.ExecutionPayloadHeader
func (_e *StateDB_Expecter) SetLatestExecutionPayloadHeader(payloadHeader interface{}) *StateDB_SetLatestExecutionPayloadHeader_Call {
	return &StateDB_SetLatestExecutionPayloadHeader_Call{Call: _e.mock.On("SetLatestExecutionPayloadHeader", payloadHeader)}
}

func (_c *StateDB_SetLatestExecutionPayloadHeader_Call) Run(run func(payloadHeader engineprimitives.ExecutionPayloadHeader)) *StateDB_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(engineprimitives.ExecutionPayloadHeader))
	})
	return _c
}

func (_c *StateDB_SetLatestExecutionPayloadHeader_Call) Return(_a0 error) *StateDB_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetLatestExecutionPayloadHeader_Call) RunAndReturn(run func(engineprimitives.ExecutionPayloadHeader) error) *StateDB_SetLatestExecutionPayloadHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalIndex provides a mock function with given fields: index
func (_m *StateDB) SetNextWithdrawalIndex(index uint64) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetNextWithdrawalIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalIndex'
type StateDB_SetNextWithdrawalIndex_Call struct {
	*mock.Call
}

// SetNextWithdrawalIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) SetNextWithdrawalIndex(index interface{}) *StateDB_SetNextWithdrawalIndex_Call {
	return &StateDB_SetNextWithdrawalIndex_Call{Call: _e.mock.On("SetNextWithdrawalIndex", index)}
}

func (_c *StateDB_SetNextWithdrawalIndex_Call) Run(run func(index uint64)) *StateDB_SetNextWithdrawalIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_SetNextWithdrawalIndex_Call) Return(_a0 error) *StateDB_SetNextWithdrawalIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetNextWithdrawalIndex_Call) RunAndReturn(run func(uint64) error) *StateDB_SetNextWithdrawalIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetNextWithdrawalValidatorIndex provides a mock function with given fields: index
func (_m *StateDB) SetNextWithdrawalValidatorIndex(index math.U64) error {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for SetNextWithdrawalValidatorIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetNextWithdrawalValidatorIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNextWithdrawalValidatorIndex'
type StateDB_SetNextWithdrawalValidatorIndex_Call struct {
	*mock.Call
}

// SetNextWithdrawalValidatorIndex is a helper method to define mock.On call
//   - index math.U64
func (_e *StateDB_Expecter) SetNextWithdrawalValidatorIndex(index interface{}) *StateDB_SetNextWithdrawalValidatorIndex_Call {
	return &StateDB_SetNextWithdrawalValidatorIndex_Call{Call: _e.mock.On("SetNextWithdrawalValidatorIndex", index)}
}

func (_c *StateDB_SetNextWithdrawalValidatorIndex_Call) Run(run func(index math.U64)) *StateDB_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateDB_SetNextWithdrawalValidatorIndex_Call) Return(_a0 error) *StateDB_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetNextWithdrawalValidatorIndex_Call) RunAndReturn(run func(math.U64) error) *StateDB_SetNextWithdrawalValidatorIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlashingAtIndex provides a mock function with given fields: index, amount
func (_m *StateDB) SetSlashingAtIndex(index uint64, amount math.U64) error {
	ret := _m.Called(index, amount)

	if len(ret) == 0 {
		panic("no return value specified for SetSlashingAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, math.U64) error); ok {
		r0 = rf(index, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetSlashingAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlashingAtIndex'
type StateDB_SetSlashingAtIndex_Call struct {
	*mock.Call
}

// SetSlashingAtIndex is a helper method to define mock.On call
//   - index uint64
//   - amount math.U64
func (_e *StateDB_Expecter) SetSlashingAtIndex(index interface{}, amount interface{}) *StateDB_SetSlashingAtIndex_Call {
	return &StateDB_SetSlashingAtIndex_Call{Call: _e.mock.On("SetSlashingAtIndex", index, amount)}
}

func (_c *StateDB_SetSlashingAtIndex_Call) Run(run func(index uint64, amount math.U64)) *StateDB_SetSlashingAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(math.U64))
	})
	return _c
}

func (_c *StateDB_SetSlashingAtIndex_Call) Return(_a0 error) *StateDB_SetSlashingAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetSlashingAtIndex_Call) RunAndReturn(run func(uint64, math.U64) error) *StateDB_SetSlashingAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlot provides a mock function with given fields: slot
func (_m *StateDB) SetSlot(slot math.U64) error {
	ret := _m.Called(slot)

	if len(ret) == 0 {
		panic("no return value specified for SetSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(slot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlot'
type StateDB_SetSlot_Call struct {
	*mock.Call
}

// SetSlot is a helper method to define mock.On call
//   - slot math.U64
func (_e *StateDB_Expecter) SetSlot(slot interface{}) *StateDB_SetSlot_Call {
	return &StateDB_SetSlot_Call{Call: _e.mock.On("SetSlot", slot)}
}

func (_c *StateDB_SetSlot_Call) Run(run func(slot math.U64)) *StateDB_SetSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateDB_SetSlot_Call) Return(_a0 error) *StateDB_SetSlot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetSlot_Call) RunAndReturn(run func(math.U64) error) *StateDB_SetSlot_Call {
	_c.Call.Return(run)
	return _c
}

// SetTotalSlashing provides a mock function with given fields: total
func (_m *StateDB) SetTotalSlashing(total math.U64) error {
	ret := _m.Called(total)

	if len(ret) == 0 {
		panic("no return value specified for SetTotalSlashing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64) error); ok {
		r0 = rf(total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_SetTotalSlashing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTotalSlashing'
type StateDB_SetTotalSlashing_Call struct {
	*mock.Call
}

// SetTotalSlashing is a helper method to define mock.On call
//   - total math.U64
func (_e *StateDB_Expecter) SetTotalSlashing(total interface{}) *StateDB_SetTotalSlashing_Call {
	return &StateDB_SetTotalSlashing_Call{Call: _e.mock.On("SetTotalSlashing", total)}
}

func (_c *StateDB_SetTotalSlashing_Call) Run(run func(total math.U64)) *StateDB_SetTotalSlashing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateDB_SetTotalSlashing_Call) Return(_a0 error) *StateDB_SetTotalSlashing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_SetTotalSlashing_Call) RunAndReturn(run func(math.U64) error) *StateDB_SetTotalSlashing_Call {
	_c.Call.Return(run)
	return _c
}

// StateRootAtIndex provides a mock function with given fields: index
func (_m *StateDB) StateRootAtIndex(index uint64) (bytes.B32, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for StateRootAtIndex")
	}

	var r0 bytes.B32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (bytes.B32, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(uint64) bytes.B32); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.B32)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_StateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateRootAtIndex'
type StateDB_StateRootAtIndex_Call struct {
	*mock.Call
}

// StateRootAtIndex is a helper method to define mock.On call
//   - index uint64
func (_e *StateDB_Expecter) StateRootAtIndex(index interface{}) *StateDB_StateRootAtIndex_Call {
	return &StateDB_StateRootAtIndex_Call{Call: _e.mock.On("StateRootAtIndex", index)}
}

func (_c *StateDB_StateRootAtIndex_Call) Run(run func(index uint64)) *StateDB_StateRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_StateRootAtIndex_Call) Return(_a0 bytes.B32, _a1 error) *StateDB_StateRootAtIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_StateRootAtIndex_Call) RunAndReturn(run func(uint64) (bytes.B32, error)) *StateDB_StateRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBlockRootAtIndex provides a mock function with given fields: index, root
func (_m *StateDB) UpdateBlockRootAtIndex(index uint64, root bytes.B32) error {
	ret := _m.Called(index, root)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlockRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bytes.B32) error); ok {
		r0 = rf(index, root)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_UpdateBlockRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlockRootAtIndex'
type StateDB_UpdateBlockRootAtIndex_Call struct {
	*mock.Call
}

// UpdateBlockRootAtIndex is a helper method to define mock.On call
//   - index uint64
//   - root bytes.B32
func (_e *StateDB_Expecter) UpdateBlockRootAtIndex(index interface{}, root interface{}) *StateDB_UpdateBlockRootAtIndex_Call {
	return &StateDB_UpdateBlockRootAtIndex_Call{Call: _e.mock.On("UpdateBlockRootAtIndex", index, root)}
}

func (_c *StateDB_UpdateBlockRootAtIndex_Call) Run(run func(index uint64, root bytes.B32)) *StateDB_UpdateBlockRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bytes.B32))
	})
	return _c
}

func (_c *StateDB_UpdateBlockRootAtIndex_Call) Return(_a0 error) *StateDB_UpdateBlockRootAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_UpdateBlockRootAtIndex_Call) RunAndReturn(run func(uint64, bytes.B32) error) *StateDB_UpdateBlockRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRandaoMixAtIndex provides a mock function with given fields: index, mix
func (_m *StateDB) UpdateRandaoMixAtIndex(index uint64, mix bytes.B32) error {
	ret := _m.Called(index, mix)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRandaoMixAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bytes.B32) error); ok {
		r0 = rf(index, mix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_UpdateRandaoMixAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRandaoMixAtIndex'
type StateDB_UpdateRandaoMixAtIndex_Call struct {
	*mock.Call
}

// UpdateRandaoMixAtIndex is a helper method to define mock.On call
//   - index uint64
//   - mix bytes.B32
func (_e *StateDB_Expecter) UpdateRandaoMixAtIndex(index interface{}, mix interface{}) *StateDB_UpdateRandaoMixAtIndex_Call {
	return &StateDB_UpdateRandaoMixAtIndex_Call{Call: _e.mock.On("UpdateRandaoMixAtIndex", index, mix)}
}

func (_c *StateDB_UpdateRandaoMixAtIndex_Call) Run(run func(index uint64, mix bytes.B32)) *StateDB_UpdateRandaoMixAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bytes.B32))
	})
	return _c
}

func (_c *StateDB_UpdateRandaoMixAtIndex_Call) Return(_a0 error) *StateDB_UpdateRandaoMixAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_UpdateRandaoMixAtIndex_Call) RunAndReturn(run func(uint64, bytes.B32) error) *StateDB_UpdateRandaoMixAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStateRootAtIndex provides a mock function with given fields: index, root
func (_m *StateDB) UpdateStateRootAtIndex(index uint64, root bytes.B32) error {
	ret := _m.Called(index, root)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStateRootAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bytes.B32) error); ok {
		r0 = rf(index, root)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_UpdateStateRootAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateRootAtIndex'
type StateDB_UpdateStateRootAtIndex_Call struct {
	*mock.Call
}

// UpdateStateRootAtIndex is a helper method to define mock.On call
//   - index uint64
//   - root bytes.B32
func (_e *StateDB_Expecter) UpdateStateRootAtIndex(index interface{}, root interface{}) *StateDB_UpdateStateRootAtIndex_Call {
	return &StateDB_UpdateStateRootAtIndex_Call{Call: _e.mock.On("UpdateStateRootAtIndex", index, root)}
}

func (_c *StateDB_UpdateStateRootAtIndex_Call) Run(run func(index uint64, root bytes.B32)) *StateDB_UpdateStateRootAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bytes.B32))
	})
	return _c
}

func (_c *StateDB_UpdateStateRootAtIndex_Call) Return(_a0 error) *StateDB_UpdateStateRootAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_UpdateStateRootAtIndex_Call) RunAndReturn(run func(uint64, bytes.B32) error) *StateDB_UpdateStateRootAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateValidatorAtIndex provides a mock function with given fields: index, validator
func (_m *StateDB) UpdateValidatorAtIndex(index math.U64, validator *types.Validator) error {
	ret := _m.Called(index, validator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateValidatorAtIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(math.U64, *types.Validator) error); ok {
		r0 = rf(index, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_UpdateValidatorAtIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateValidatorAtIndex'
type StateDB_UpdateValidatorAtIndex_Call struct {
	*mock.Call
}

// UpdateValidatorAtIndex is a helper method to define mock.On call
//   - index math.U64
//   - validator *types.Validator
func (_e *StateDB_Expecter) UpdateValidatorAtIndex(index interface{}, validator interface{}) *StateDB_UpdateValidatorAtIndex_Call {
	return &StateDB_UpdateValidatorAtIndex_Call{Call: _e.mock.On("UpdateValidatorAtIndex", index, validator)}
}

func (_c *StateDB_UpdateValidatorAtIndex_Call) Run(run func(index math.U64, validator *types.Validator)) *StateDB_UpdateValidatorAtIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64), args[1].(*types.Validator))
	})
	return _c
}

func (_c *StateDB_UpdateValidatorAtIndex_Call) Return(_a0 error) *StateDB_UpdateValidatorAtIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_UpdateValidatorAtIndex_Call) RunAndReturn(run func(math.U64, *types.Validator) error) *StateDB_UpdateValidatorAtIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorByIndex provides a mock function with given fields: index
func (_m *StateDB) ValidatorByIndex(index math.U64) (*types.Validator, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorByIndex")
	}

	var r0 *types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(math.U64) (*types.Validator, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(math.U64) *types.Validator); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(math.U64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_ValidatorByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorByIndex'
type StateDB_ValidatorByIndex_Call struct {
	*mock.Call
}

// ValidatorByIndex is a helper method to define mock.On call
//   - index math.U64
func (_e *StateDB_Expecter) ValidatorByIndex(index interface{}) *StateDB_ValidatorByIndex_Call {
	return &StateDB_ValidatorByIndex_Call{Call: _e.mock.On("ValidatorByIndex", index)}
}

func (_c *StateDB_ValidatorByIndex_Call) Run(run func(index math.U64)) *StateDB_ValidatorByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(math.U64))
	})
	return _c
}

func (_c *StateDB_ValidatorByIndex_Call) Return(_a0 *types.Validator, _a1 error) *StateDB_ValidatorByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_ValidatorByIndex_Call) RunAndReturn(run func(math.U64) (*types.Validator, error)) *StateDB_ValidatorByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorIndexByPubkey provides a mock function with given fields: pubkey
func (_m *StateDB) ValidatorIndexByPubkey(pubkey bytes.B48) (math.U64, error) {
	ret := _m.Called(pubkey)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorIndexByPubkey")
	}

	var r0 math.U64
	var r1 error
	if rf, ok := ret.Get(0).(func(bytes.B48) (math.U64, error)); ok {
		return rf(pubkey)
	}
	if rf, ok := ret.Get(0).(func(bytes.B48) math.U64); ok {
		r0 = rf(pubkey)
	} else {
		r0 = ret.Get(0).(math.U64)
	}

	if rf, ok := ret.Get(1).(func(bytes.B48) error); ok {
		r1 = rf(pubkey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_ValidatorIndexByPubkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorIndexByPubkey'
type StateDB_ValidatorIndexByPubkey_Call struct {
	*mock.Call
}

// ValidatorIndexByPubkey is a helper method to define mock.On call
//   - pubkey bytes.B48
func (_e *StateDB_Expecter) ValidatorIndexByPubkey(pubkey interface{}) *StateDB_ValidatorIndexByPubkey_Call {
	return &StateDB_ValidatorIndexByPubkey_Call{Call: _e.mock.On("ValidatorIndexByPubkey", pubkey)}
}

func (_c *StateDB_ValidatorIndexByPubkey_Call) Run(run func(pubkey bytes.B48)) *StateDB_ValidatorIndexByPubkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bytes.B48))
	})
	return _c
}

func (_c *StateDB_ValidatorIndexByPubkey_Call) Return(_a0 math.U64, _a1 error) *StateDB_ValidatorIndexByPubkey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_ValidatorIndexByPubkey_Call) RunAndReturn(run func(bytes.B48) (math.U64, error)) *StateDB_ValidatorIndexByPubkey_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateDB creates a new instance of StateDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateDB {
	mock := &StateDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

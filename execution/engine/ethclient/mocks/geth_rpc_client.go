// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GethRPCClient is an autogenerated mock type for the GethRPCClient type
type GethRPCClient struct {
	mock.Mock
}

type GethRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GethRPCClient) EXPECT() *GethRPCClient_Expecter {
	return &GethRPCClient_Expecter{mock: &_m.Mock}
}

// CallContext provides a mock function with given fields: ctx, result, method, args
func (_m *GethRPCClient) CallContext(ctx context.Context, result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GethRPCClient_CallContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContext'
type GethRPCClient_CallContext_Call struct {
	*mock.Call
}

// CallContext is a helper method to define mock.On call
//   - ctx context.Context
//   - result interface{}
//   - method string
//   - args ...interface{}
func (_e *GethRPCClient_Expecter) CallContext(ctx interface{}, result interface{}, method interface{}, args ...interface{}) *GethRPCClient_CallContext_Call {
	return &GethRPCClient_CallContext_Call{Call: _e.mock.On("CallContext",
		append([]interface{}{ctx, result, method}, args...)...)}
}

func (_c *GethRPCClient_CallContext_Call) Run(run func(ctx context.Context, result interface{}, method string, args ...interface{})) *GethRPCClient_CallContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *GethRPCClient_CallContext_Call) Return(_a0 error) *GethRPCClient_CallContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GethRPCClient_CallContext_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *GethRPCClient_CallContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewGethRPCClient creates a new instance of GethRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGethRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GethRPCClient {
	mock := &GethRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

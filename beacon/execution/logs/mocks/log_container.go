// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LogContainer is an autogenerated mock type for the LogContainer type
type LogContainer struct {
	mock.Mock
}

type LogContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *LogContainer) EXPECT() *LogContainer_Expecter {
	return &LogContainer_Expecter{mock: &_m.Mock}
}

// BlockNumber provides a mock function with given fields:
func (_m *LogContainer) BlockNumber() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockNumber")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LogContainer_BlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumber'
type LogContainer_BlockNumber_Call struct {
	*mock.Call
}

// BlockNumber is a helper method to define mock.On call
func (_e *LogContainer_Expecter) BlockNumber() *LogContainer_BlockNumber_Call {
	return &LogContainer_BlockNumber_Call{Call: _e.mock.On("BlockNumber")}
}

func (_c *LogContainer_BlockNumber_Call) Run(run func()) *LogContainer_BlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogContainer_BlockNumber_Call) Return(_a0 uint64) *LogContainer_BlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogContainer_BlockNumber_Call) RunAndReturn(run func() uint64) *LogContainer_BlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// LogIndex provides a mock function with given fields:
func (_m *LogContainer) LogIndex() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogIndex")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LogContainer_LogIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIndex'
type LogContainer_LogIndex_Call struct {
	*mock.Call
}

// LogIndex is a helper method to define mock.On call
func (_e *LogContainer_Expecter) LogIndex() *LogContainer_LogIndex_Call {
	return &LogContainer_LogIndex_Call{Call: _e.mock.On("LogIndex")}
}

func (_c *LogContainer_LogIndex_Call) Run(run func()) *LogContainer_LogIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogContainer_LogIndex_Call) Return(_a0 uint64) *LogContainer_LogIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogContainer_LogIndex_Call) RunAndReturn(run func() uint64) *LogContainer_LogIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogContainer creates a new instance of LogContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogContainer {
	mock := &LogContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

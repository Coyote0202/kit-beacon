// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/berachain/beacon-kit/primitives"
)

// MarshalJSON marshals as JSON.
func (b BeaconBlockHeader) MarshalJSON() ([]byte, error) {
	type BeaconBlockHeader struct {
		Slot          primitives.SSZUInt64 `json:"slot"`
		ProposerIndex primitives.SSZUInt64 `json:"proposerIndex"`
		ParentRoot    primitives.Root      `json:"parentRoot"    ssz-size:"32"`
		StateRoot     primitives.Root      `json:"stateRoot"     ssz-size:"32"`
		BodyRoot      primitives.Root      `json:"bodyRoot"      ssz-size:"32"`
	}
	var enc BeaconBlockHeader
	enc.Slot = b.Slot
	enc.ProposerIndex = b.ProposerIndex
	enc.ParentRoot = b.ParentRoot
	enc.StateRoot = b.StateRoot
	enc.BodyRoot = b.BodyRoot
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BeaconBlockHeader) UnmarshalJSON(input []byte) error {
	type BeaconBlockHeader struct {
		Slot          *primitives.SSZUInt64 `json:"slot"`
		ProposerIndex *primitives.SSZUInt64 `json:"proposerIndex"`
		ParentRoot    *primitives.Root      `json:"parentRoot"    ssz-size:"32"`
		StateRoot     *primitives.Root      `json:"stateRoot"     ssz-size:"32"`
		BodyRoot      *primitives.Root      `json:"bodyRoot"      ssz-size:"32"`
	}
	var dec BeaconBlockHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Slot != nil {
		b.Slot = *dec.Slot
	}
	if dec.ProposerIndex != nil {
		b.ProposerIndex = *dec.ProposerIndex
	}
	if dec.ParentRoot != nil {
		b.ParentRoot = *dec.ParentRoot
	}
	if dec.StateRoot != nil {
		b.StateRoot = *dec.StateRoot
	}
	if dec.BodyRoot != nil {
		b.BodyRoot = *dec.BodyRoot
	}
	return nil
}

// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*validatorJSONMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v Validator) MarshalJSON() ([]byte, error) {
	type Validator struct {
		Pubkey           hexutil.Bytes `json:"pubkey"           ssz-size:"48"`
		Credentials      hexutil.Bytes `json:"credentials"      ssz-size:"32"`
		EffectiveBalance uint64        `json:"effectiveBalance"`
		Slashed          bool          `json:"slashed"`
	}
	var enc Validator
	enc.Pubkey = v.Pubkey[:]
	enc.Credentials = v.Credentials[:]
	enc.EffectiveBalance = v.EffectiveBalance
	enc.Slashed = v.Slashed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *Validator) UnmarshalJSON(input []byte) error {
	type Validator struct {
		Pubkey           *hexutil.Bytes `json:"pubkey"           ssz-size:"48"`
		Credentials      *hexutil.Bytes `json:"credentials"      ssz-size:"32"`
		EffectiveBalance *uint64        `json:"effectiveBalance"`
		Slashed          *bool          `json:"slashed"`
	}
	var dec Validator
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Pubkey != nil {
		if len(*dec.Pubkey) != len(v.Pubkey) {
			return errors.New("field 'pubkey' has wrong length, need 48 items")
		}
		copy(v.Pubkey[:], *dec.Pubkey)
	}
	if dec.Credentials != nil {
		if len(*dec.Credentials) != len(v.Credentials) {
			return errors.New("field 'credentials' has wrong length, need 32 items")
		}
		copy(v.Credentials[:], *dec.Credentials)
	}
	if dec.EffectiveBalance != nil {
		v.EffectiveBalance = *dec.EffectiveBalance
	}
	if dec.Slashed != nil {
		v.Slashed = *dec.Slashed
	}
	return nil
}
